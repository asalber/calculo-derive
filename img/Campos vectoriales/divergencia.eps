%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Microsoft PowerPoint - divergencia)
%%Version: 1 4
%%Creator: (PScript5.dll Version 5.2)
%%CreationDate: (D:20030507155649Z)
%%DocumentData: Clean7Bit
%%BoundingBox: 105 54 842 408
%%Pages: 0
%%DocumentProcessColors: Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%EndComments
105 54 moveto 842 54 lineto 842 408 lineto 105 408 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Symbol
[ 0 /.notdef/dotmath/gradient/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/universal/numbersign
/existential/percent/ampersand/suchthat/parenleft/parenright
/asteriskmath/plus/comma/minus/period/slash
/zero/one/two/three/four/five
/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/congruent/Alpha
/Beta/Chi/Delta/Epsilon/Phi/Gamma
/Eta/Iota/theta1/Kappa/Lambda/Mu
/Nu/Omicron/Pi/Theta/Rho/Sigma
/Tau/Upsilon/sigma1/Omega/Xi/Psi
/Zeta/bracketleft/therefore/bracketright/perpendicular/underscore
/radicalex/alpha/beta/chi/delta/epsilon
/phi/gamma/eta/iota/phi1/kappa
/lambda/mu/nu/omicron/pi/theta
/rho/sigma/tau/upsilon/omega1/omega
/xi/psi/zeta/braceleft/bar/braceright
/similar/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/Euro/Upsilon1
/minute/lessequal/fraction/infinity/florin/club
/diamond/heart/spade/arrowboth/arrowleft/arrowup
/arrowright/arrowdown/degree/plusminus/second/greaterequal
/multiply/proportional/partialdiff/bullet/divide/notequal
/equivalence/approxequal/ellipsis/arrowvertex/arrowhorizex/carriagereturn
/aleph/Ifraktur/Rfraktur/weierstrass/circlemultiply/circleplus
/emptyset/intersection/union/propersuperset/reflexsuperset/notsubset
/propersubset/reflexsubset/element/notelement/angle/gradient
/registerserif/copyrightserif/trademarkserif/product/radical/dotmath
/logicalnot/logicaland/logicalor/arrowdblboth/arrowdblleft/arrowdblup
/arrowdblright/arrowdbldown/lozenge/angleleft/registersans/copyrightsans
/trademarksans/summation/parenlefttp/parenleftex/parenleftbt/bracketlefttp
/bracketleftex/bracketleftbt/bracelefttp/braceleftmid/braceleftbt/braceex
/.notdef/angleright/integral/integraltp/integralex/integralbt
/parenrighttp/parenrightex/parenrightbt/bracketrighttp/bracketrightex/bracketrightbt
/bracerighttp/bracerightmid/bracerightbt/.notdef
/N32/Symbol -1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
105 54 737 354 rectclip
[ 0 -1 1 0 51.02362 512.79529 ] concat
%%BeginResource: font T11
10 dict begin
T3Defs
/FontType 3 def
/FontName /N75 def
/FontMatrix [0.02042 
0 
0 
-0.02042 
0 
0 ]def
/FontBBox [-2 
-46 
22 
4 ]def
/Encoding [
1 nND
/parenrightex /parenrightbt /parenrighttp /parenleftex /parenleftbt 
/parenlefttp 
249 nND] def
/GlyphProcs 7 dict begin
/.notdef {250 0 d0} bind def
/parenrightex {{
19 0 15 -46 17 4 setcachedevice
q
2 0 0 -50 15 4 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 2 def
/Height 50 def
/ImageMatrix [2 0 0 -50 0 50]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F
3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
2 50 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
/parenrightbt {{
19 0 -2 -46 17 4 setcachedevice
q
19 0 0 -50 -2 4 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 19 def
/Height 50 def
/ImageMatrix [19 0 0 -50 0 50]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF
9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF1FFF
FF3FFFFF3FFFFF3FFFFF3FFFFE3FFFFE7FFFFE7FFFFE7FFFFC7FFFFCFFFFFCFF
FFF8FFFFF9FFFFF1FFFFF3FFFFE3FFFFE7FFFFC7FFFF8FFFFF9FFFFF1FFFFE3F
FFFC7FFFF8FFFFF1FFFFC3FFFF87FFFF1FFFFF7FFFFF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
19 50 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
/parenrighttp {{
19 0 -2 -46 17 4 setcachedevice
q
19 0 0 -50 -2 4 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 19 def
/Height 50 def
/ImageMatrix [19 0 0 -50 0 50]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<7FFFFF1FFFFF8FFFFFC3FFFFF1FFFFF8FFFFFC7FFFFE3FFFFF1FFFFF1FFFFF8F
FFFFC7FFFFE7FFFFE3FFFFF3FFFFF1FFFFF9FFFFF8FFFFFCFFFFFCFFFFFC7FFF
FE7FFFFE7FFFFE7FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF9FFFFF9F
FFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF
9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9F>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
19 50 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
/parenleftex {{
19 0 2 -46 4 4 setcachedevice
q
2 0 0 -50 2 4 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 2 def
/Height 50 def
/ImageMatrix [2 0 0 -50 0 50]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F
3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
2 50 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
/parenleftbt {{
19 0 2 -46 22 4 setcachedevice
q
20 0 0 -50 2 4 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 20 def
/Height 50 def
/ImageMatrix [20 0 0 -50 0 50]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFF
FF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF9FFFFF9F
FFFF9FFFFF9FFFFF9FFFFF9FFFFFCFFFFFCFFFFFCFFFFFC7FFFFE7FFFFE7FFFF
E3FFFFF3FFFFF1FFFFF9FFFFF8FFFFFCFFFFFC7FFFFE3FFFFF1FFFFF1FFFFF8F
FFFFC7FFFFE3FFFFF1FFFFF87FFFFE3FFFFF1FFFFFCF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
20 50 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
/parenlefttp {{
19 0 2 -46 22 4 setcachedevice
q
20 0 0 -50 2 4 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 20 def
/Height 50 def
/ImageMatrix [20 0 0 -50 0 50]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFFCFFFFF1FFFFC3FFFF87FFFF1FFFFE3FFFFC7FFFF8FFFFF1FFFFF3FFFFE3F
FFFC7FFFFCFFFFF8FFFFF9FFFFF1FFFFF3FFFFE3FFFFE7FFFFE7FFFFC7FFFFCF
FFFFCFFFFFCFFFFF8FFFFF9FFFFF9FFFFF9FFFFF9FFFFF1FFFFF3FFFFF3FFFFF
3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFF
FF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
20 50 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
currentdict end def
FontName currentdict end
definefont pop
%%EndResource
[/T11/N75 -1 TZ
%%BeginResource: font T9
10 dict begin
T3Defs
/FontType 3 def
/FontName /N54 def
/FontMatrix [0.01515 
0 
0 
-0.01515 
0 
0 ]def
/FontBBox [0 
-5 
27 
3 ]def
/Encoding [
1 nND
/arrowrightnosp 
254 nND] def
/GlyphProcs 2 dict begin
/.notdef {250 0 d0} bind def
/arrowrightnosp {{
27 0 0 -5 27 3 setcachedevice
q
27 0 0 -8 0 3 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 27 def
/Height 8 def
/ImageMatrix [27 0 0 -8 0 8]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFFCFFFFFFFE3FFFFFFE0FF0000003F0000001FFFFFE0FFFFFFE3FFFFFFCFFF
>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
27 8 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
currentdict end def
FontName currentdict end
definefont pop
%%EndResource
[/T9/N54 -1 TZ
%%BeginResource: font T8
10 dict begin
T3Defs
/FontType 3 def
/FontName /N56 def
/FontMatrix [0.02042 
0 
0 
-0.02042 
0 
0 ]def
/FontBBox [0 
-4 
21 
3 ]def
/Encoding [
1 nND
/arrowrightnosp 
254 nND] def
/GlyphProcs 2 dict begin
/.notdef {250 0 d0} bind def
/arrowrightnosp {{
20 0 0 -4 21 3 setcachedevice
q
21 0 0 -7 0 3 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 21 def
/Height 7 def
/ImageMatrix [21 0 0 -7 0 7]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFBFFFFFCFFFFFC3F00000FFFFC3FFFFCFFFFFBFF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
21 7 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
currentdict end def
FontName currentdict end
definefont pop
%%EndResource
[/T8/N56 -1 TZ
%%BeginResource: font T7
10 dict begin
T3Defs
/FontType 3 def
/FontName /N51 def
/FontMatrix [0.01515 
0 
0 
-0.01515 
0 
0 ]def
/FontBBox [-12 
-46 
31 
14 ]def
/Encoding [
102 nND
/f 
153 nND] def
/GlyphProcs 2 dict begin
/.notdef {250 0 d0} bind def
/f {{
18 0 -12 -46 31 14 setcachedevice
q
43 0 0 -60 -12 14 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 43 def
/Height 60 def
/ImageMatrix [43 0 0 -60 0 60]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFFFFFFE0FFFFFFFFFF803FFFFFFFFF0E1FFFFFFFFE3E1FFFFFFFFC3C1FFFFF
FFF87C1FFFFFFFF0FE3FFFFFFFF0FFFFFFFFFFE1FFFFFFFFFFC1FFFFFFFFFFC1
FFFFFFFFFF83FFFFFFFFFF83FFFFFFFFFF03FFFFFFFFFF07FFFFFFFFFE07FFFF
FFFFF807FFFFFFFF00007FFFFFFF00007FFFFFFFFE0FFFFFFFFFFC1FFFFFFFFF
FC1FFFFFFFFFFC1FFFFFFFFFF81FFFFFFFFFF83FFFFFFFFFF83FFFFFFFFFF83F
FFFFFFFFF03FFFFFFFFFF07FFFFFFFFFF07FFFFFFFFFE07FFFFFFFFFE0FFFFFF
FFFFE0FFFFFFFFFFE0FFFFFFFFFFC0FFFFFFFFFFC1FFFFFFFFFFC1FFFFFFFFFF
81FFFFFFFFFF83FFFFFFFFFF83FFFFFFFFFF83FFFFFFFFFF07FFFFFFFFFF07FF
FFFFFFFF07FFFFFFFFFE0FFFFFFFFFFE0FFFFFFFFFFE1FFFFFFFFFFE1FFFFFFF
FFFC3FFFFFFFFFFC3FFFFFFFFFFC7FFFFFFFFFF87FFFFFFFFFF8FFFFFFFF8FF1
FFFFFFFF07F3FFFFFFFF07E3FFFFFFFF0FC7FFFFFFFF0F1FFFFFFFFF803FFFFF
FFFFC0FFFFFFFFFF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
43 60 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
currentdict end def
FontName currentdict end
definefont pop
%%EndResource
[/T7/N51 -1 TZ
%%BeginResource: font T6
10 dict begin
T3Defs
/FontType 3 def
/FontName /N71 def
/FontMatrix [0.02042 
0 
0 
-0.02042 
0 
0 ]def
/FontBBox [0 
-23 
25 
0 ]def
/Encoding [
97 nND
/a 
158 nND] def
/GlyphProcs 2 dict begin
/.notdef {250 0 d0} bind def
/a {{
25 0 0 -23 25 0 setcachedevice
q
25 0 0 -23 0 0 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 25 def
/Height 23 def
/ImageMatrix [25 0 0 -23 0 23]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFF07E7FFFC3307FFF9F90FFFE3FD0FFFC7FC0FFF87FC1FFF0FFC1FFF1FFC1FF
E1FFC3FFC3FFC3FFC3FF83FF87FF83FF87FF87FF87FF07FF0FFE07FF0FFE0FFF
0FFD0FFF0FFB0FFF07E61DFF03CE1BFF801E13FFC03E07FFE0FE1FFF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
25 23 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
currentdict end def
FontName currentdict end
definefont pop
%%EndResource
[/T6/N71 -1 TZ
%%BeginResource: font T5
10 dict begin
T3Defs
/FontType 3 def
/FontName /N62 def
/FontMatrix [0.02042 
0 
0 
-0.02042 
0 
0 ]def
/FontBBox [-2 
-46 
22 
4 ]def
/Encoding [
1 nND
/parenrightex /parenrightbt /parenrighttp /parenleftex /parenleftbt 
/parenlefttp 
249 nND] def
/GlyphProcs 7 dict begin
/.notdef {250 0 d0} bind def
/parenrightex {{
19 0 15 -46 17 4 setcachedevice
q
2 0 0 -50 15 4 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 2 def
/Height 50 def
/ImageMatrix [2 0 0 -50 0 50]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F
3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
2 50 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
/parenrightbt {{
19 0 -2 -46 17 4 setcachedevice
q
19 0 0 -50 -2 4 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 19 def
/Height 50 def
/ImageMatrix [19 0 0 -50 0 50]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF
9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF1FFF
FF3FFFFF3FFFFF3FFFFF3FFFFE3FFFFE7FFFFE7FFFFE7FFFFC7FFFFCFFFFFCFF
FFF8FFFFF9FFFFF1FFFFF3FFFFE3FFFFE7FFFFC7FFFF8FFFFF9FFFFF1FFFFE3F
FFFC7FFFF8FFFFF1FFFFC3FFFF87FFFF1FFFFF7FFFFF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
19 50 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
/parenrighttp {{
19 0 -2 -46 17 4 setcachedevice
q
19 0 0 -50 -2 4 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 19 def
/Height 50 def
/ImageMatrix [19 0 0 -50 0 50]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<7FFFFF1FFFFF8FFFFFC3FFFFF1FFFFF8FFFFFC7FFFFE3FFFFF1FFFFF1FFFFF8F
FFFFC7FFFFE7FFFFE3FFFFF3FFFFF1FFFFF9FFFFF8FFFFFCFFFFFCFFFFFC7FFF
FE7FFFFE7FFFFE7FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF9FFFFF9F
FFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF
9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9FFFFF9F>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
19 50 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
/parenleftex {{
19 0 2 -46 4 4 setcachedevice
q
2 0 0 -50 2 4 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 2 def
/Height 50 def
/ImageMatrix [2 0 0 -50 0 50]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F
3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
2 50 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
/parenleftbt {{
19 0 2 -46 22 4 setcachedevice
q
20 0 0 -50 2 4 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 20 def
/Height 50 def
/ImageMatrix [20 0 0 -50 0 50]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFF
FF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF9FFFFF9F
FFFF9FFFFF9FFFFF9FFFFF9FFFFFCFFFFFCFFFFFCFFFFFC7FFFFE7FFFFE7FFFF
E3FFFFF3FFFFF1FFFFF9FFFFF8FFFFFCFFFFFC7FFFFE3FFFFF1FFFFF1FFFFF8F
FFFFC7FFFFE3FFFFF1FFFFF87FFFFE3FFFFF1FFFFFCF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
20 50 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
/parenlefttp {{
19 0 2 -46 22 4 setcachedevice
q
20 0 0 -50 2 4 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 20 def
/Height 50 def
/ImageMatrix [20 0 0 -50 0 50]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFFCFFFFF1FFFFC3FFFF87FFFF1FFFFE3FFFFC7FFFF8FFFFF1FFFFF3FFFFE3F
FFFC7FFFFCFFFFF8FFFFF9FFFFF1FFFFF3FFFFE3FFFFE7FFFFE7FFFFC7FFFFCF
FFFFCFFFFFCFFFFF8FFFFF9FFFFF9FFFFF9FFFFF9FFFFF1FFFFF3FFFFF3FFFFF
3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFF
FF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF3FFFFF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
20 50 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
currentdict end def
FontName currentdict end
definefont pop
%%EndResource
[/T5/N62 -1 TZ
%%BeginResource: font T4
10 dict begin
T3Defs
/FontType 3 def
/FontName /N41 def
/FontMatrix [0.02042 
0 
0 
-0.02042 
0 
0 ]def
/FontBBox [2 
-33 
23 
0 ]def
/Encoding [
48 nND
/zero 
207 nND] def
/GlyphProcs 2 dict begin
/.notdef {250 0 d0} bind def
/zero {{
25 0 2 -33 23 0 setcachedevice
q
21 0 0 -33 2 0 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 21 def
/Height 33 def
/ImageMatrix [21 0 0 -33 0 33]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FF07FFFC01FFF878FFF1FC7FE3FE3FE3FE1FC7FF1FC7FF1F87FF0F87FF8F87FF
8F0FFF870FFF870FFF870FFF870FFF870FFF870FFF870FFF870FFF870FFF870F
FF878FFF8F87FF0F87FF0FC7FF1FC7FF1FE3FE3FE3FE3FF1FC7FF8F0FFFC01FF
FF07FF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
21 33 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
currentdict end def
FontName currentdict end
definefont pop
%%EndResource
[/T4/N41 -1 TZ
%%BeginResource: font T3
10 dict begin
T3Defs
/FontType 3 def
/FontName /N17 def
/FontMatrix [0.01515 
0 
0 
-0.01515 
0 
0 ]def
/FontBBox [0 
-5 
27 
3 ]def
/Encoding [
1 nND
/arrowrightnosp 
254 nND] def
/GlyphProcs 2 dict begin
/.notdef {250 0 d0} bind def
/arrowrightnosp {{
27 0 0 -5 27 3 setcachedevice
q
27 0 0 -8 0 3 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 27 def
/Height 8 def
/ImageMatrix [27 0 0 -8 0 8]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFFCFFFFFFFE3FFFFFFE0FF0000003F0000001FFFFFE0FFFFFFE3FFFFFFCFFF
>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
27 8 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
currentdict end def
FontName currentdict end
definefont pop
%%EndResource
[/T3/N17 -1 TZ
%%BeginResource: font T2
10 dict begin
T3Defs
/FontType 3 def
/FontName /N15 def
/FontMatrix [0.01515 
0 
0 
-0.01515 
0 
0 ]def
/FontBBox [2 
-32 
33 
1 ]def
/Encoding [
97 nND
/a 
158 nND] def
/GlyphProcs 2 dict begin
/.notdef {250 0 d0} bind def
/a {{
34 0 2 -32 33 1 setcachedevice
q
31 0 0 -33 2 1 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 31 def
/Height 33 def
/ImageMatrix [31 0 0 -33 0 33]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFE1FFFFFF80601FFE0E601FFC1F401FF83F003FF03F003FE07F003FC07F007
F80FF007F80FF007F01FF007F01FF00FE01FF00FE03FE00FC03FE00FC03FE01F
C07FC01F807FC01F807FC03F807F803F00FF803F00FF003F00FF007F00FE807F
00FC007F00FD00FB00FB00F3007300E7800600CF800E001F801E003FC03F007F
E0FF83FF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
31 33 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
currentdict end def
FontName currentdict end
definefont pop
%%EndResource
[/T2/N15 -1 TZ
%%BeginResource: font T1
10 dict begin
T3Defs
/FontType 3 def
/FontName /N26 def
/FontMatrix [0.01492 
0 
0 
-0.01492 
0 
0 ]def
/FontBBox [-7 
-32 
35 
14 ]def
/Encoding [
120 nND
/x /y /z 
133 nND] def
/GlyphProcs 4 dict begin
/.notdef {250 0 d0} bind def
/x {{
34 0 -2 -32 35 1 setcachedevice
q
37 0 0 -33 -2 1 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 37 def
/Height 33 def
/ImageMatrix [37 0 0 -33 0 33]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFE3FFE1FFF803FF80FFC001FF007FFC01FE007FFE00FC007FFE00FC00FFFF0
0F8E1FFFF0073FFFFFF8073FFFFFF8067FFFFFF800FFFFFFFC00FFFFFFFC01FF
FFFFFC01FFFFFFFE01FFFFFFFE01FFFFFFFE01FFFFFFFE00FFFFFFFF00FFFFFF
FF00FFFFFFFE007FFFFFFC007FFFFFFC807FFFFFF9803FFFFFF3803FDFFFE7C0
1F9FC3C7C01F3F800FE00E7F001FE000FF003FE000FF007FF001FF80FFF807FF
C3FFFC1FFF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
37 33 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
/y {{
30 0 -7 -32 29 14 setcachedevice
q
36 0 0 -46 -7 14 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 36 def
/Height 46 def
/ImageMatrix [36 0 0 -46 0 46]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FFFF9FFC3FFFFC1FF81FFFE00FF01FFF800FF00FFFF00FF00FFFF807F00FFFF8
07F80FFFFC07FC0FFFFC07FE1FFFFC07FF1FFFFC07FF1FFFFC07FF3FFFFC07FE
3FFFFC07FE7FFFFC07FE7FFFFC03FCFFFFFC03FCFFFFFC03F9FFFFFC03F3FFFF
FC03F3FFFFFC03E7FFFFFC03C7FFFFFC03CFFFFFFC039FFFFFFE031FFFFFFE03
3FFFFFFE027FFFFFFE007FFFFFFE00FFFFFFFE01FFFFFFFE03FFFFFFFE03FFFF
FFFE07FFFFFFFE0FFFFFFFFE1FFFFFFFFC3FFFFFFFFC3FFFFFFFFC7FFFFFC3FC
FFFFFF80F9FFFFFF0063FFFFFF0007FFFFFF000FFFFFFF001FFFFFFF807FFFFF
FFC1FFFFFFFF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
36 46 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
/z {{
26 0 -1 -31 26 5 setcachedevice
q
27 0 0 -36 -1 5 cm
q
n
0 0 1 1 re
10 dict dup begin
/ImageType 1 def
/Width 27 def
/Height 36 def
/ImageMatrix [27 0 0 -36 0 36]  def
/BitsPerComponent 1 def
/Decode [0 1 ]  def
/DataSource
1 dict begin /_i 0 def currentdict end mark exch { begin {
<FE00001FFC00003FFC00007FFC00007FFC0000FFF80001FFF8FFE3FFFBFFE7FF
FFFFC7FFFFFF8FFFFFFF1FFFFFFE3FFFFFFE7FFFFFFC7FFFFFF8FFFFFFF1FFFF
FFE3FFFFFFE3FFFFFFC7FFFFFF8FFFFFFF1FFFFFFE3FFFFFFE3FFFFFFC7FFFFF
F83FFFFFF00FFFFFE00FE1FFE007C0FFC007807F8007807F0003807FFE03807F
FF0380FFFF8181FFFFE003FFFFF80FFF>
} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse
end } bind aload pop ] cvx
 def end
27 36 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
imagemask
Q
Q
} exec } bind def
currentdict end def
FontName currentdict end
definefont pop
%%EndResource
[/T1/N26 -1 TZ
false setSA
n
27.36 780.92 540 -720 re
1 setgray
f
1 J
1 j
0.720001 w
10 M
[] 0 d
n
231.36 252.92 m
196.32 262.76 l
0  setgray
S
n
198.24 266.6 m
189.6 264.92 l
195.84 259.16 l
eofill
n
237.36 270.92 m
217.68 295.4 l
S
n
221.52 297.32 m
213.6 300.92 l
215.28 292.52 l
eofill
n
249.36 270.92 m
249.36 299.72 l
S
n
253.44 299.24 m
249.6 307.16 l
245.52 299.24 l
eofill
n
249.36 234.92 m
244.8 211.88 l
S
n
241.2 213.56 m
243.36 204.92 l
248.88 212.12 l
eofill
n
243.36 240.92 m
219.36 226.28 l
S
n
218.16 230.36 m
213.6 223.16 l
222.24 223.64 l
eofill
n
261.36 258.92 m
281.52 288.92 l
S
n
284.4 286.28 m
285.6 295.16 l
277.92 290.6 l
eofill
n
255.36 264.92 m
258.96 276.2 l
S
n
262.8 274.28 m
261.6 283.16 l
255.36 276.92 l
eofill
n
267.36 246.92 m
274.32 239.96 l
S
n
271.2 237.8 m
279.36 235.16 l
276.72 243.32 l
eofill
n
147.36 174.92 m
297.36 174.92 l
297.36 312.92 l
297.36 174.92 m
387.36 84.92 l
297.36 174.92 m
252.96 246.92 l
S
n
257.04 248.36 m
249.6 252.92 l
250.32 244.28 l
eofill
369.36 84.9203 m
/N26 [0 16.0622 -16.0622 0 0 0] Tf
(x) show
315.361 278.12 m
(y) show
166.321 158.12 m
(z) show
275.522 200.361 m
/N15 [0 16.0622 -16.0622 0 0 0] Tf
(a) show
q
n
261.36 202.28 12.96 6.48 re
W
n
265.2 202.28 m
/N17 [0 16.0622 -16.0622 0 0 0] Tf
(\001) show
Q
n
147.36 422.12 m
297.36 422.12 l
297.36 560.12 l
297.36 422.12 m
387.36 332.12 l
297.36 422.12 m
252.96 494.12 l
S
n
257.04 495.56 m
249.6 500.12 l
250.32 491.48 l
eofill
369.36 332.12 m
/N26 [0 16.0622 -16.0622 0 0 0] Tf
(x) show
315.361 525.32 m
(y) show
166.321 405.32 m
(z) show
275.522 447.561 m
/N15 [0 16.0622 -16.0622 0 0 0] Tf
(a) show
q
n
261.36 449.48 12.96 6.47998 re
W
n
265.2 449.48 m
/N17 [0 16.0622 -16.0622 0 0 0] Tf
(\001) show
Q
n
207.36 510.92 m
236.64 501.32 l
S
n
234.72 497.72 m
243.36 499.16 l
237.36 505.16 l
eofill
n
255.36 540.92 m
255.36 518.12 l
S
n
251.52 518.84 m
255.36 511.16 l
259.44 518.84 l
eofill
n
285.36 516.92 m
262.08 507.8 l
S
n
261.36 511.64 m
255.36 504.92 l
264.24 504.2 l
eofill
n
285.36 480.92 m
262.08 490.04 l
S
n
264.24 493.88 m
255.36 492.92 l
261.36 486.44 l
eofill
n
237.36 462.92 m
241.44 479.96 l
S
n
245.28 478.52 m
243.36 487.16 l
237.6 480.44 l
eofill
n
219.36 486.92 m
236.4 491 l
S
n
236.88 487.16 m
243.36 492.92 l
234.96 494.84 l
eofill
n
225.36 540.92 m
245.04 516.44 l
S
n
241.44 514.76 m
249.6 511.16 l
247.68 519.56 l
eofill
n
141.36 614.12 m
291.36 614.12 l
291.36 752.12 l
291.36 614.12 m
381.36 524.12 l
291.36 614.12 m
246.96 686.12 l
S
n
251.04 687.56 m
243.36 692.12 l
244.32 683.48 l
eofill
363.36 524.12 m
/N26 [0 16.0622 -16.0622 0 0 0] Tf
(x) show
309.361 717.319 m
(y) show
160.321 597.32 m
(z) show
269.522 639.561 m
/N15 [0 16.0622 -16.0622 0 0 0] Tf
(a) show
q
n
255.36 641.48 12.96 6.47998 re
W
n
259.2 641.48 m
/N17 [0 16.0622 -16.0622 0 0 0] Tf
(\001) show
Q
n
231.36 666.92 m
211.68 691.4 l
S
n
215.52 693.32 m
207.36 696.92 l
209.28 688.52 l
eofill
n
261.36 702.92 m
241.68 727.4 l
S
n
245.52 729.32 m
237.6 732.92 l
239.28 724.52 l
eofill
n
231.36 696.92 m
217.44 715.16 l
S
n
221.28 717.08 m
213.6 720.92 l
215.04 712.28 l
eofill
n
273.36 672.92 m
253.68 697.4 l
S
n
257.52 699.32 m
249.6 703.16 l
251.28 694.52 l
eofill
n
249.36 666.92 m
235.44 685.16 l
S
n
239.28 687.08 m
231.36 691.16 l
233.04 682.28 l
eofill
388.32 678.2 m
/N32 [0 11.8397 -15.8035 0 0 0] Tf
(\(\))
[10.8 10.8 ] pdfys
388.32 703.88 m
/N41 [0 12 -12 0 0 0] Tf
(0) show
388.32 694.76 m
/N32 [0 11.97 -11.97 0 0 0] Tf
(=) show
390 673.4 m
/N62 [0 12 -12 0 0 0] Tf
(\001) show
397.68 673.4 m
(\002) show
383.04 673.4 m
(\003) show
390 638.36 m
(\004) show
397.68 638.36 m
(\005) show
383.04 638.36 m
(\006) show
388.32 656.36 m
/N32 [0 15.96 -15.96 0 0 0] Tf
(\001) show
388.32 643.88 m
(\002) show
388.32 681.8 m
/N71 [0 12 -12 0 0 0] Tf
(a) show
388.32 664.52 m
/N51 [0 15.9374 -15.9374 0 0 0] Tf
(f) show
q
n
369.36 683 18.24 5.03998 re
W
n
380.88 683 m
/N56 [0 12 -12 0 0 0] Tf
(\001) show
Q
q
n
369.36 665.24 14.16 6.47998 re
W
n
374.4 665.24 m
/N54 [0 15.9374 -15.9374 0 0 0] Tf
(\001) show
Q
q
n
369.36 646.52 14.64 6.47998 re
W
n
374.88 646.52 m
/N54 [0 15.9374 -15.9374 0 0 0] Tf
(\001) show
Q
382.32 438.2 m
/N32 [0 11.8397 -15.8035 0 0 0] Tf
(\(\))
[10.8 10.8 ] pdfys
382.32 463.64 m
/N41 [0 12 -12 0 0 0] Tf
(0) show
382.32 454.52 m
/N32 [0 11.97 -11.97 0 0 0] Tf
(<) show
384 433.4 m
/N75 [0 12 -12 0 0 0] Tf
(\001) show
391.68 433.4 m
(\002) show
377.04 433.4 m
(\003) show
384 398.36 m
(\004) show
391.68 398.36 m
(\005) show
377.04 398.36 m
(\006) show
382.32 416.36 m
/N32 [0 15.96 -15.96 0 0 0] Tf
(\001) show
382.32 403.88 m
(\002) show
382.32 441.8 m
/N71 [0 12 -12 0 0 0] Tf
(a) show
382.32 424.52 m
/N51 [0 15.9374 -15.9374 0 0 0] Tf
(f) show
q
n
363.36 443 18.24 5.03998 re
W
n
374.88 443 m
/N56 [0 12 -12 0 0 0] Tf
(\001) show
Q
q
n
363.36 425.24 14.16 6.47998 re
W
n
368.4 425.24 m
/N54 [0 15.9374 -15.9374 0 0 0] Tf
(\001) show
Q
q
n
363.36 406.52 14.64 6.47998 re
W
n
368.88 406.52 m
/N54 [0 15.9374 -15.9374 0 0 0] Tf
(\001) show
Q
382.32 210.2 m
/N32 [0 11.8397 -15.8035 0 0 0] Tf
(\(\))
[10.8 10.8 ] pdfys
382.32 235.88 m
/N41 [0 12 -12 0 0 0] Tf
(0) show
382.32 226.76 m
/N32 [0 11.97 -11.97 0 0 0] Tf
(>) show
384 205.4 m
/N75 [0 12 -12 0 0 0] Tf
(\001) show
391.68 205.4 m
(\002) show
377.04 205.4 m
(\003) show
384 170.36 m
(\004) show
391.68 170.36 m
(\005) show
377.04 170.36 m
(\006) show
382.32 188.36 m
/N32 [0 15.96 -15.96 0 0 0] Tf
(\001) show
382.32 175.88 m
(\002) show
382.32 213.8 m
/N71 [0 12 -12 0 0 0] Tf
(a) show
382.32 196.52 m
/N51 [0 15.9374 -15.9374 0 0 0] Tf
(f) show
q
n
363.36 215 18.24 5.03999 re
W
n
374.88 215 m
/N56 [0 12 -12 0 0 0] Tf
(\001) show
Q
q
n
363.36 197.24 14.16 6.48 re
W
n
368.4 197.24 m
/N54 [0 15.9374 -15.9374 0 0 0] Tf
(\001) show
Q
q
n
363.36 178.52 14.64 6.48 re
W
n
368.88 178.52 m
/N54 [0 15.9374 -15.9374 0 0 0] Tf
(\001) show
Q
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Symbol
%%DocumentSuppliedResources:
%%+ font T8
%%+ font T9
%%+ font T11
%%+ font T2
%%+ font T7
%%+ font T1
%%+ font T4
%%+ font T5
%%+ font T6
%%+ font T3
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EOF
